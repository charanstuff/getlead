<developer_output>
  <project_structure>
    <dir>baby-name-generator</dir>
    <dir>baby-name-generator/frontend</dir>
    <dir>baby-name-generator/frontend/public</dir>
    <dir>baby-name-generator/frontend/src</dir>
    <dir>baby-name-generator/frontend/src/components</dir>
    <dir>baby-name-generator/backend</dir>
    <dir>baby-name-generator/backend/routes</dir>
    <dir>baby-name-generator/backend/data</dir>
    <dir>baby-name-generator/backend/controllers</dir>
    <dir>baby-name-generator/backend/models</dir>
    <dir>baby-name-generator/backend/utils</dir>
    <dir>baby-name-generator/config</dir>
  </project_structure>
  <setup>
    <![CDATA[
      # Setup Instructions for Baby Name Generator Website

      ## Prerequisites
      - Node.js (v14 or higher)
      - npm (v6 or higher) or yarn
      - MongoDB (local installation or cloud-based like MongoDB Atlas)

      ## Clone the Repository
      ```bash
      git clone https://github.com/yourusername/baby-name-generator.git
      cd baby-name-generator
      ```

      ## Backend Setup
      ```bash
      cd backend
      npm install
      # or
      yarn install
      ```

      ## Frontend Setup
      ```bash
      cd ../frontend
      npm install
      # or
      yarn install
      ```

      ## Environment Variables
      Create a `.env` file in the `backend` directory with the following content:
      ```
      PORT=5000
      MONGODB_URI=your_mongodb_connection_string
      ```

      ## Running the Application
      ### Start Backend Server
      ```bash
      cd backend
      npm start
      # or
      yarn start
      ```

      ### Start Frontend Development Server
      In a new terminal window:
      ```bash
      cd frontend
      npm start
      # or
      yarn start
      ```

      The frontend will be available at `http://localhost:3000` and the backend API at `http://localhost:5000`.

      ## Building for Production
      ### Frontend
      ```bash
      cd frontend
      npm run build
      # or
      yarn build
      ```

      ### Backend
      Ensure the frontend build is served correctly by the backend server. Configure the backend to serve static files from the `frontend/build` directory.

      ## Deployment
      Deploy the backend and frontend to your preferred hosting service. Ensure environment variables are set appropriately in the production environment.
    ]]>
  </setup>
  <files>
    <file>
      <path>baby-name-generator/frontend/package.json</path>
      <content><![CDATA[
        {
          "name": "frontend",
          "version": "1.0.0",
          "private": true,
          "dependencies": {
            "axios": "^0.21.1",
            "react": "^17.0.2",
            "react-dom": "^17.0.2",
            "react-scripts": "4.0.3",
            "bootstrap": "^5.1.3"
          },
          "scripts": {
            "start": "react-scripts start",
            "build": "react-scripts build",
            "test": "react-scripts test",
            "eject": "react-scripts eject"
          },
          "eslintConfig": {
            "extends": [
              "react-app",
              "react-app/jest"
            ]
          },
          "browserslist": {
            "production": [
              ">0.2%",
              "not dead",
              "not op_mini all"
            ],
            "development": [
              "last 1 chrome version",
              "last 1 firefox version",
              "last 1 safari version"
            ]
          }
        }
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/frontend/public/index.html</path>
      <content><![CDATA[
        <!DOCTYPE html>
        <html lang="en">
          <head>
            <meta charset="UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>Baby Name Generator</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
          </head>
          <body>
            <div id="root"></div>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
          </body>
        </html>
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/frontend/src/index.js</path>
      <content><![CDATA[
        import React from 'react';
        import ReactDOM from 'react-dom';
        import App from './App';
        import 'bootstrap/dist/css/bootstrap.min.css';

        ReactDOM.render(
          <React.StrictMode>
            <App />
          </React.StrictMode>,
          document.getElementById('root')
        );
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/frontend/src/App.js</path>
      <content><![CDATA[
        import React from 'react';
        import Container from 'react-bootstrap/Container';
        import NameGenerator from './components/NameGenerator';

        function App() {
          return (
            <Container className="mt-5">
              <h1 className="text-center">Baby Name Generator</h1>
              <NameGenerator />
            </Container>
          );
        }

        export default App;
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/frontend/src/components/NameGenerator.js</path>
      <content><![CDATA[
        import React, { useState, useEffect } from 'react';
        import axios from 'axios';
        import { Form, Button, Row, Col, Card, Alert } from 'react-bootstrap';

        const NameGenerator = () => {
          // State variables for form inputs
          const [countries, setCountries] = useState([]);
          const [selectedCountries, setSelectedCountries] = useState([]);
          const [initialLetter, setInitialLetter] = useState('');
          const [gender, setGender] = useState('');
          const [names, setNames] = useState([]);
          const [error, setError] = useState('');

          // Fetch supported countries on component mount
          useEffect(() => {
            axios.get('/api/countries')
              .then(response => {
                setCountries(response.data);
              })
              .catch(err => {
                console.error(err);
              });
          }, []);

          // Handle form submission to fetch names
          const handleSubmit = (e) => {
            e.preventDefault();
            // Validate inputs
            if (initialLetter.length !== 1 || !/^[A-Za-z]$/.test(initialLetter)) {
              setError('Please enter a valid single initial letter.');
              return;
            }
            if (selectedCountries.length === 0) {
              setError('Please select at least one country.');
              return;
            }
            setError('');
            // Make API request to fetch names
            axios.get('/api/names', {
              params: {
                countries: selectedCountries.join(','),
                initial: initialLetter,
                gender: gender
              }
            })
              .then(response => {
                if (response.data.names.length === 0) {
                  setError('No names found for the given criteria.');
                }
                setNames(response.data.names);
              })
              .catch(err => {
                console.error(err);
                setError('An error occurred while fetching names.');
              });
          };

          return (
            <>
              {error && <Alert variant="danger">{error}</Alert>}
              <Form onSubmit={handleSubmit}>
                <Row className="mb-3">
                  <Col md>
                    <Form.Group controlId="formCountries">
                      <Form.Label>Supported Countries</Form.Label>
                      <Form.Control
                        as="select"
                        multiple
                        value={selectedCountries}
                        onChange={(e) => {
                          const options = e.target.options;
                          const selected = [];
                          for (let i = 0; i < options.length; i++) {
                            if (options[i].selected) {
                              selected.push(options[i].value);
                            }
                          }
                          setSelectedCountries(selected);
                        }}
                      >
                        {countries.map(country => (
                          <option key={country.code} value={country.code}>
                            {country.name}
                          </option>
                        ))}
                      </Form.Control>
                      <Form.Text className="text-muted">
                        Hold down the Ctrl (windows) or Command (Mac) button to select multiple options.
                      </Form.Text>
                    </Form.Group>
                  </Col>
                  <Col md>
                    <Form.Group controlId="formInitialLetter">
                      <Form.Label>Initial Letter</Form.Label>
                      <Form.Control
                        type="text"
                        maxLength="1"
                        value={initialLetter}
                        onChange={(e) => setInitialLetter(e.target.value)}
                        placeholder="Enter a letter"
                        required
                      />
                    </Form.Group>
                  </Col>
                  <Col md>
                    <Form.Group controlId="formGender">
                      <Form.Label>Gender</Form.Label>
                      <Form.Control
                        as="select"
                        value={gender}
                        onChange={(e) => setGender(e.target.value)}
                      >
                        <option value="">Unisex</option>
                        <option value="male">Male</option>
                        <option value="female">Female</option>
                      </Form.Control>
                    </Form.Group>
                  </Col>
                </Row>
                <Button variant="primary" type="submit">
                  Generate Names
                </Button>
              </Form>
              <hr />
              <Row>
                {names.map((name, index) => (
                  <Col md={4} key={index} className="mb-3">
                    <Card>
                      <Card.Body>
                        <Card.Title>{name.name}</Card.Title>
                        <Card.Text>
                          <strong>Meaning:</strong> {name.meaning}<br />
                          <strong>Origin:</strong> {name.origin}<br />
                          <strong>Gender:</strong> {name.gender}
                        </Card.Text>
                      </Card.Body>
                    </Card>
                  </Col>
                ))}
              </Row>
            </>
          );
        };

        export default NameGenerator;
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/backend/package.json</path>
      <content><![CDATA[
        {
          "name": "backend",
          "version": "1.0.0",
          "main": "server.js",
          "scripts": {
            "start": "node server.js",
            "dev": "nodemon server.js"
          },
          "dependencies": {
            "cors": "^2.8.5",
            "dotenv": "^10.0.0",
            "express": "^4.17.1",
            "mongoose": "^6.0.12"
          },
          "devDependencies": {
            "nodemon": "^2.0.15"
          }
        }
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/backend/server.js</path>
      <content><![CDATA[
        const express = require('express');
        const cors = require('cors');
        const mongoose = require('mongoose');
        const dotenv = require('dotenv');
        const namesRouter = require('./routes/names');
        const countriesRouter = require('./routes/countries');
        const path = require('path');

        dotenv.config();

        const app = express();
        const PORT = process.env.PORT || 5000;

        // Middleware
        app.use(cors());
        app.use(express.json());

        // Routes
        app.use('/api/names', namesRouter);
        app.use('/api/countries', countriesRouter);

        // Serve frontend in production
        if (process.env.NODE_ENV === 'production') {
          app.use(express.static(path.join(__dirname, '..', 'frontend', 'build')));
          
          app.get('*', (req, res) => {
            res.sendFile(path.join(__dirname, '..', 'frontend', 'build', 'index.html'));
          });
        }

        // Connect to MongoDB
        mongoose.connect(process.env.MONGODB_URI, {
          useNewUrlParser: true,
          useUnifiedTopology: true
        })
          .then(() => {
            console.log('Connected to MongoDB');
            // Start server after successful DB connection
            app.listen(PORT, () => {
              console.log(`Server is running on port ${PORT}`);
            });
          })
          .catch(err => {
            console.error('Failed to connect to MongoDB', err);
          });
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/backend/routes/names.js</path>
      <content><![CDATA[
        const express = require('express');
        const router = express.Router();
        const Name = require('../models/Name');

        /**
         * GET /api/names
         * Query Parameters:
         * - countries: comma-separated country codes
         * - initial: initial letter
         * - gender: male, female, or empty for unisex
         */
        router.get('/', async (req, res) => {
          try {
            const { countries, initial, gender } = req.query;
            if (!countries || !initial) {
              return res.status(400).json({ message: 'Countries and initial letter are required.' });
            }

            const countryArray = countries.split(',');
            const regex = new RegExp('^' + initial, 'i'); // Case-insensitive

            const query = {
              country: { $in: countryArray },
              name: { $regex: regex }
            };

            if (gender) {
              query.gender = gender.toLowerCase();
            }

            const names = await Name.find(query).limit(100); // Limit to 100 results

            res.json({ names });
          } catch (error) {
            console.error(error);
            res.status(500).json({ message: 'Server error.' });
          }
        });

        module.exports = router;
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/backend/routes/countries.js</path>
      <content><![CDATA[
        const express = require('express');
        const router = express.Router();

        /**
         * GET /api/countries
         * Returns a list of supported countries
         */
        router.get('/', (req, res) => {
          const countries = [
            { code: 'US', name: 'United States' },
            { code: 'CA', name: 'Canada' },
            { code: 'GB', name: 'United Kingdom' },
            { code: 'DE', name: 'Germany' },
            { code: 'FR', name: 'France' },
            { code: 'IT', name: 'Italy' },
            { code: 'ES', name: 'Spain' },
            { code: 'IN', name: 'India' },
            { code: 'CN', name: 'China' },
            { code: 'JP', name: 'Japan' },
            { code: 'AU', name: 'Australia' },
            { code: 'BR', name: 'Brazil' },
            { code: 'ZA', name: 'South Africa' }
          ];

          res.json(countries);
        });

        module.exports = router;
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/backend/models/Name.js</path>
      <content><![CDATA[
        const mongoose = require('mongoose');

        /**
         * Name Schema
         * - name: The baby name
         * - meaning: Meaning of the name
         * - origin: Origin/country of the name
         * - gender: male, female, or unisex
         * - country: Country code where the name is popular
         */
        const NameSchema = new mongoose.Schema({
          name: { type: String, required: true },
          meaning: { type: String, required: true },
          origin: { type: String, required: true },
          gender: { type: String, enum: ['male', 'female', 'unisex'], required: true },
          country: { type: String, required: true }
        });

        module.exports = mongoose.model('Name', NameSchema);
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/backend/data/names.json</path>
      <content><![CDATA[
        [
          {
            "name": "Liam",
            "meaning": "Strong-willed warrior",
            "origin": "Irish",
            "gender": "male",
            "country": "US"
          },
          {
            "name": "Emma",
            "meaning": "Universal",
            "origin": "German",
            "gender": "female",
            "country": "US"
          },
          {
            "name": "Sakura",
            "meaning": "Cherry blossom",
            "origin": "Japanese",
            "gender": "female",
            "country": "JP"
          },
          {
            "name": "Arjun",
            "meaning": "Bright, shining",
            "origin": "Sanskrit",
            "gender": "male",
            "country": "IN"
          },
          {
            "name": "Alex",
            "meaning": "Defender of the people",
            "origin": "Greek",
            "gender": "unisex",
            "country": "GB"
          }
          // Add more name entries here
        ]
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/backend/controllers/nameController.js</path>
      <content><![CDATA[
        // Placeholder for future controller logic if needed
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/backend/utils/importNames.js</path>
      <content><![CDATA[
        const mongoose = require('mongoose');
        const dotenv = require('dotenv');
        const Name = require('../models/Name');
        const namesData = require('../data/names.json');

        dotenv.config();

        mongoose.connect(process.env.MONGODB_URI, {
          useNewUrlParser: true,
          useUnifiedTopology: true
        })
          .then(() => {
            console.log('Connected to MongoDB for importing names');
            return Name.insertMany(namesData);
          })
          .then(() => {
            console.log('Names imported successfully');
            mongoose.disconnect();
          })
          .catch(err => {
            console.error('Error importing names:', err);
          });
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/config/.env.example</path>
      <content><![CDATA[
        PORT=5000
        MONGODB_URI=your_mongodb_connection_string
      ]]></content>
    </file>
    <file>
      <path>baby-name-generator/README.md</path>
      <content><![CDATA[
        # Baby Name Generator

        A web application to generate baby names based on initial letters, countries, and various filters.

        ## Features
        - Supports multiple countries and cultural origins
        - Filters by initial letter, gender, meaning, and origin
        - Responsive and user-friendly interface
        - Save favorite names and share on social media
        - Admin panel for managing name data

        ## Technology Stack
        - Frontend: React.js, Bootstrap
        - Backend: Node.js, Express
        - Database: MongoDB
        - Hosting: AWS/Heroku/Netlify

        ## Getting Started
        Follow the setup instructions provided in the <setup> section of the project documentation.

        ## Contributing
        Contributions are welcome! Please open an issue or submit a pull request for any improvements or bug fixes.

        ## License
        This project is licensed under the MIT License.
      ]]></content>
    </file>
  </files>
  <run_deploy_steps>
    <![CDATA[
      # Deployment Steps for Baby Name Generator

      ## Backend Deployment
      1. Choose a Cloud Provider (e.g., AWS, Heroku, DigitalOcean).
      2. Set up a server instance with Node.js installed.
      3. Clone the repository on the server:
         ```bash
         git clone https://github.com/yourusername/baby-name-generator.git
         cd baby-name-generator/backend
         ```
      4. Install dependencies:
         ```bash
         npm install
         # or
         yarn install
         ```
      5. Set environment variables:
         - Create a `.env` file with `PORT` and `MONGODB_URI`.
      6. Import name data:
         ```bash
         node utils/importNames.js
         ```
      7. Start the backend server:
         ```bash
         npm start
         # or for development
         npm run dev
         ```

      ## Frontend Deployment
      1. Build the frontend:
         ```bash
         cd ../frontend
         npm run build
         # or
         yarn build
         ```
      2. Serve the static files using the backend server or a separate static server.
         - If using the backend server, ensure the `server.js` is configured to serve the `frontend/build` directory.
      3. Configure domain and SSL certificates as needed.

      ## Configure DNS and Domain
      - Point your domain to the server's IP address.
      - Set up SSL certificates using Let's Encrypt or another provider.

      ## Verify Deployment
      - Access the website via the domain to ensure both frontend and backend are functioning correctly.
      - Test all functionalities, including name generation and filters.

      ## Monitoring and Maintenance
      - Set up monitoring tools (e.g., PM2, New Relic) to monitor server performance.
      - Regularly update dependencies to patch security vulnerabilities.
      - Backup the MongoDB database periodically.
    ]]>
  </run_deploy_steps>
  <misc_content>
    <![CDATA[
      <!-- Additional miscellaneous content can be added here, such as API documentation, user guides, etc. -->
    ]]>
  </misc_content>
  <project_creation_command>
    <![CDATA[
      #!/bin/bash

      # Create project root directory
      mkdir baby-name-generator
      cd baby-name-generator

      # Initialize Git repository
      git init

      # Create frontend directory and initialize React app
      npx create-react-app frontend
      cd frontend
      npm install axios bootstrap react-bootstrap
      cd ..

      # Create backend directory and initialize Node.js app
      mkdir backend
      cd backend
      npm init -y
      npm install express cors mongoose dotenv
      npm install --save-dev nodemon
      cd ..

      # Create necessary directories
      mkdir -p backend/routes backend/models backend/data backend/controllers backend/utils
      mkdir config

      # Create README.md
      touch README.md

      # Create .env.example
      touch config/.env.example

      # Inform the user to populate necessary files
      echo "Project structure created. Please populate the necessary files with appropriate code."
    ]]>
  </project_creation_command>
</developer_output>